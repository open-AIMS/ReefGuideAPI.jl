import{_ as e,c as i,o as a,ai as t}from"./chunks/framework.3Uj6wpql.js";const k=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"getting_started.md","filePath":"getting_started.md","lastUpdated":null}'),n={name:"getting_started.md"};function l(p,s,h,o,d,r){return a(),i("div",null,s[0]||(s[0]=[t(`<h1 id="Getting-Started" tabindex="-1">Getting Started <a class="header-anchor" href="#Getting-Started" aria-label="Permalink to &quot;Getting Started {#Getting-Started}&quot;">​</a></h1><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p>Initialize the project the usual way:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]instantiate</span></span></code></pre></div><p>A TOML file should be defined indicating location of the MPA dataset. These are currently the files/data created in Step/Script 1a in <a href="https://github.com/open-AIMS/GBR-reef-guidance-assessment" target="_blank" rel="noreferrer">https://github.com/open-AIMS/GBR-reef-guidance-assessment</a></p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepped_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PREPPED_DATA_DIR = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:/some_path_to_data/MPA/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TIFF_CACHE_DIR = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;some location to cache geotiffs&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REGIONAL_CACHE_DIR = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;some location to cache regional datasets&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DEBUG_MODE = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;false&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Optional, disables file caching and displays debug logs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">COG_THREADS = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Optional, Number of threads to use when creating COGs (defaults to 1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TILE_SIZE = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;256&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Optional, tile block size to use (defaults to 256)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>By convention, this file is named <code>.config.toml</code> (note the leading <code>.</code>).</p></div><h2 id="JWT-Auth-configuration" tabindex="-1">JWT Auth configuration <a class="header-anchor" href="#JWT-Auth-configuration" aria-label="Permalink to &quot;JWT Auth configuration {#JWT-Auth-configuration}&quot;">​</a></h2><p>The API can be additionally configured to expect a valid JWT in the <code>Authorization: Bearer &lt;token&gt;</code> header format.</p><p>Add the following to <code>.config.toml</code>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jwt_auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Enable JWT auth : bool true/false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JWT_ENABLED = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Which iss to validate for the JWTs?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JWT_ISS = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://issuer.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># WKT JWKS endpoint where public key can be retrieved</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WKT_ENDPOINT = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://https://issuer.com/api/.well-known/jwks.json&quot;</span></span></code></pre></div><p>Pay attention to the issuer and wkt endpoints. The first should exactly match the expected JWT issuer claim. The second should be web-resolvable and return a WKT JSON which provides the public key.</p><h3 id="Auth-TODOs" tabindex="-1">Auth TODOs <a class="header-anchor" href="#Auth-TODOs" aria-label="Permalink to &quot;Auth TODOs {#Auth-TODOs}&quot;">​</a></h3><ul><li>ensure health check route is not authorised</li></ul><h2 id="quickstart" tabindex="-1">Quickstart <a class="header-anchor" href="#quickstart" aria-label="Permalink to &quot;Quickstart&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReefGuideAPI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># To enable debug messages:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ENV[&quot;JULIA_DEBUG&quot;] = &quot;ReefGuideAPI&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If multiple threads are available, a parallel server will be spun up</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ReefGuideAPI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start_server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.config.toml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For best performance, start with at least one interactive thread:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --threads=4,1</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The config setting <code>COG_THREADS</code> controls how many threads should be requested when writing out COGs. Ideally this will be set to at least 2 (preferably 4). Higher values do seem to reduce write times but with diminishing returns (tested up to 8). Locally, write times with four threads configured range from 10 to 15 seconds.</p></div><p>In its current state, the main page displays a simple form for dev/testing purposes.</p><h2 id="Dynamic-COG-generation" tabindex="-1">Dynamic COG generation <a class="header-anchor" href="#Dynamic-COG-generation" aria-label="Permalink to &quot;Dynamic COG generation {#Dynamic-COG-generation}&quot;">​</a></h2><p>Example URL:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://127.0.0.1:8000/assess/Cairns-Cooktown/slopes?Depth=-9.0:0.0&amp;Slope=0.0:40.0</span></span></code></pre></div><h2 id="Simple-Slippy-Tiles" tabindex="-1">Simple Slippy Tiles <a class="header-anchor" href="#Simple-Slippy-Tiles" aria-label="Permalink to &quot;Simple Slippy Tiles {#Simple-Slippy-Tiles}&quot;">​</a></h2><p>Example URL:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://127.0.0.1:8000/tile/8/231/139?region=Cairns-Cooktown&amp;rtype=slopes&amp;Depth=-9.0:0.0&amp;Slope=0.0:40.0&amp;Rugosity=0.0:3.0</span></span></code></pre></div><h2 id="Development-setup" tabindex="-1">Development setup <a class="header-anchor" href="#Development-setup" aria-label="Permalink to &quot;Development setup {#Development-setup}&quot;">​</a></h2><p>The steps below assumes you are in the project root.</p><p>Create a sandbox enviroment:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sandbox</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sandbox</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sandbox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">julia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Revise</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Infiltrator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Chairmarks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sandbox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">julia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span></code></pre></div><p>Copy the quickstart to a file (e.g., <code>dev_server.jl</code>).</p><p>Create the <code>.config.toml</code> file and save to the sandbox directory.</p><p>Assuming VS Code is configured to default to the sandbox environment and start the Julia REPL at project root:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;cd sandbox</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev_server.jl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Note that the server now caches the initially loaded spatial data in between server launches to reduce downtime. It will be necessary to restart the Julia session to reload spatial data.</p><h2 id="Performance-notes" tabindex="-1">Performance notes <a class="header-anchor" href="#Performance-notes" aria-label="Permalink to &quot;Performance notes {#Performance-notes}&quot;">​</a></h2><p>The config setting <code>COG_THREADS</code> controls how many threads should be requested when writing out COGs. Ideally this will be set to at least 2 (preferably 4). Higher values do seem to reduce write times but with diminishing returns (tested up to 8). Locally, write times with four threads configured range from 10 to 15 seconds.</p><h2 id="Reef-edge-alignment-for-site-searching" tabindex="-1">Reef edge alignment for site searching <a class="header-anchor" href="#Reef-edge-alignment-for-site-searching" aria-label="Permalink to &quot;Reef edge alignment for site searching {#Reef-edge-alignment-for-site-searching}&quot;">​</a></h2><p><code>identify_edge_aligned_sites()</code> can be used to identify potential sites that only align with the nearest reef edge (or specified rotations away from this angle). This method works by identifying the closest edge of reef polygon geometries that have been converted into lines.</p><p>The following processing is required before use:</p><ul><li><p>Reef polygons should be simplified (<code>GO.simplify()</code>) and buffered to avoid matching possibly inaccurate reef edges.</p></li><li><p>Simplified reef polygons should be provided as vertex-vertex lines with <code>polygon_to_lines()</code>.</p></li><li><p>Require raster of target pixels to search, and their indices (currently a vector of <code>CartesianIndices</code> for identifying search pixels). Use <code>findall(bool_search_raster)</code> to return pixel indices.</p></li><li><p>Raster of search pixels should be masked by reef polygons or simplified reef polygons.</p></li><li><p>The target region name should be specified in GBRMPA format.</p><ul><li>E.g. &quot;Townsville/Whitsunday Management Area&quot; rather than &quot;Townsville-Whitsunday&quot;.</li></ul></li></ul><h3 id="Parquet-assessment-additional-setup" tabindex="-1">Parquet assessment additional setup <a class="header-anchor" href="#Parquet-assessment-additional-setup" aria-label="Permalink to &quot;Parquet assessment additional setup {#Parquet-assessment-additional-setup}&quot;">​</a></h3><ul><li><p>A parquet GeoDataFrame must be loaded and filtered for unsuitable pixels based on user criteria thresholds using a Dict and <code>within_thresholds()</code>.</p></li><li><p><code>lons</code> and <code>lats</code> columns (FLoat64) must be added to the GeoDataFrame.</p><ul><li>E.g. <code>valid_pixels.lons = first.(GI.coordinates.(valid_pixels.geometry))</code></li></ul><p>The column used for masking should be the same as the column specified as geometry_col in <code>identify_edge_aligned_sites</code>(default =<code>:geometry</code>).</p></li></ul>`,42)]))}const u=e(n,[["render",l]]);export{k as __pageData,u as default};
